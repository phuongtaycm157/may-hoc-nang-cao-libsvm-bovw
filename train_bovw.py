# -*- coding: utf-8 -*-
"""Bag of visual words.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iADTgoQZ-999iHmvdKFQiPcgYN_SSFxH
"""
# !pip install sklearn
# !pip install opencv-python
# !pip install opencv-contrib-python
# !pip install scipy

import cv2
import numpy as np
import os
from libsvm.svmutil import *

# Khai báo thư mục chứa dữ liệu train và các thư mục class con của nó
train_path = './data/Training'
training_name = os.listdir(train_path)
training_name

impath = []
imclass = []
class_id = 0

# Hàm trải về danh sách ảnh trong thư mục đưa vào
def imglist(dir_path):
  return [os.path.join(dir_path, name_file) for name_file in os.listdir(dir_path)][:2500]

# Lấy danh sách hình và dánh nhãn cho chúng
for name in training_name:
  dir_path = os.path.join(train_path, name)
  class_path = imglist(dir_path=dir_path)
  impath+=class_path
  imclass+=[class_id]*len(class_path)
  class_id+=1

# đọc và rúc trích các đặt trưng của ảnh bằng BRISK
desc_list = []

brisk = cv2.BRISK_create()

for imname in impath:
  img = cv2.imread(imname)
  kpts, des = brisk.detectAndCompute(img, None)
  desc_list.append((imname, des))

# Loại bỏ các bức ảnh Lỗi
error_idx = []
for i in range(len(impath)):
  try:
    l = len(desc_list[i][1])
  except:
    error_idx.append(i)

error_idx.reverse()

for i in error_idx:
  impath.remove(impath[i])
  imclass.remove(imclass[i])
  desc_list.remove(desc_list[i])

# Xây dựng codebook
descriptors = desc_list[0][1]
for (filename, desc) in desc_list[1:]:
  descriptors = np.vstack((descriptors, desc))

descriptors_float = descriptors.astype(float)

from scipy.cluster.vq import kmeans, vq

k = 500
voc, variance = kmeans(descriptors_float, k, 1)

# tần xuất của các feature trong mỗi ảnh(bag of visual words)
im_features = np.zeros((len(impath), k), "float32")

for i in range(len(impath)):
  words, distance = vq(desc_list[i][1],voc)
  for w in words:
      im_features[i][w] += 1


nbr_occurences = np.sum( (im_features > 0) * 1, axis = 0)
idf = np.array(np.log((1.0*len(impath)+1) / (1.0*nbr_occurences + 1)), 'float64')


# Đưa giá trị về [0..1]
from sklearn.preprocessing import StandardScaler
stdSlr = StandardScaler().fit(im_features)
im_features = stdSlr.transform(im_features)


# Classification with libsvm
prob = svm_problem(np.array(imclass), im_features)
param = svm_parameter('-t 0 -c 1000 -b 1')
m = svm_train(prob, param)

svm_save_model('bin/linear_libsvm_gender_10000.model', m)

# classification
# from sklearn.svm import LinearSVC
# clf = LinearSVC(max_iter=10000)  #Default of 100 is not converging
# clf.fit(im_features, np.array(imclass))

# Zip và Xuất file kết quả 
from joblib import dump
dump((training_name, stdSlr, k, voc), "bin/bovw_linear_10000.pkl", compress=3)
